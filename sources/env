built_ins.c:  if ((chdir(m->word_tab[1])) == -1)
built_ins.c:  if ((old_pwd = env_var_val(m->env, "PWD")) == NULL)
built_ins.c:  while (m->word_tab[1][i] != '\0')
built_ins.c:      if (m->word_tab[1][i] < '0' || m->word_tab[1][i] > '9')
built_ins.c:  m->ret = 0;
built_ins.c:  if (m->word_tab[1])
built_ins.c:      ret = my_getnbr(m->word_tab[1]);
built_ins.c:      m->ret = ret;
built_ins.c:  m->ret = ret;
cd_bins.c:  if (!m->word_tab[1] || my_strcmp(m->word_tab[1], "~") == 0)
cd_bins.c:      if ((ret = env_var_val(m->env, "HOME")) == NULL)
cd_bins.c:	if ((ret = env_var_val(m->env, "PWD")) == NULL)
cd_bins.c:	if ((ret = env_var_val(m->env, "HOME")) == NULL)
cd_bins.c:  if (my_strcmp(m->word_tab[0], "cd..") == 0
cd_bins.c:      || my_strcmp(m->word_tab[0], "..") == 0
cd_bins.c:      || my_strcmp(m->word_tab[1], "..") == 0)
cd_bins.c:      if ((old_pwd = env_var_val(m->env, "PWD")) == NULL)
cd_bins.c:  if ((ret = env_var_val(m->env, "PWD")) == NULL)
cd_bins.c:  if (my_strcmp(m->word_tab[1], "-") == 0)
cd_bins.c:      if ((ret = env_var_val(m->env, "OLDPWD")) == NULL)
cd_bins.c:      if ((ret = env_var_val(m->env, "OLDPWD")) == NULL)
cd_bins.c:  while (m->word_tab[1][i] == c || m->word_tab[1][i] == '/')
cd_bins.c:  return (m->word_tab[1] + i);
cd_bins.c:  if (m->word_tab[1][0] == '~' && m->word_tab[1][1] == '/')
cd_bins.c:      if ((ret = env_var_val(m->env, "HOME")) == NULL)
cd_bins.c:      if (chdir(my_strcat(home, m->word_tab[1] + 2)) == -1)
cd_bins.c:      if ((ret = env_var_val(m->env, "PWD")) == NULL)
echo_bins.c:  if (m->word_tab[i][(*n) + 1] == '?')
echo_bins.c:      my_put_nbr(m->ret);
echo_bins.c:  else if ((ret = find_var(m->env, m->word_tab[i] + (*n) + 1))
echo_bins.c:      my_putstr(ret + my_echolen(m->word_tab[i] + (*n) + 1) + 1);
echo_bins.c:      while (m->word_tab[i][(*n) + 1] != '\0')
echo_bins.c:  while (m->word_tab[++i] != NULL)
echo_bins.c:      while (m->word_tab[i][++n] != '\0')
echo_bins.c:          if (m->word_tab[i][n] == '$')
echo_bins.c:            my_putchar(m->word_tab[i][n]);
echo_bins.c:      if (m->word_tab[i + 1] != NULL)
echo_bins.c:  while (m->word_tab[++i] != NULL)
echo_bins.c:      while (m->word_tab[i][++n] != '\0')
echo_bins.c:        if (m->word_tab[i][n] == '$')
echo_bins.c:	    if (m->word_tab[i][n + 1] == '?')
echo_bins.c:	    else if (find_var(m->env, m->word_tab[i] + n + 1) == NULL)
echo_bins.c:		my_putstr_err(m->word_tab[i] + n + 1);
echo_bins.c:  if (my_strcmp(m->word_tab[1], "-n") == 0)
env_bins.c:  if (m->env != NULL)
env_bins.c:      new = my_strcat((tab = my_str_tab(m->env->var))[0], "=");
env_bins.c:      m->env->var = new;
env_bins.c:      m->env = tmp;
env_bins.c:      my_put_in_list_end(&m->env, new, &tmp);
env_bins.c:  tmp = m->env;
env_bins.c:  while (m->env != NULL
env_bins.c:	 && (my_strcmp(var, (tab = my_str_tab(m->env->var))[0]) != 0))
env_bins.c:      m->env = m->env->next;
env_bins.c:  m->env = tmp;
env_bins.c:  if (m->word_tab[1] != NULL)
env_bins.c:    add_env(m->word_tab[1], m->word_tab[2], m);
env_bins.c:  if (m->env != NULL)
env_bins.c:    my_show_list(m->env);
env_bins.c:  tmp = m->env;
env_bins.c:  if (!m->word_tab[1])
env_bins.c:  while (m->env != NULL &&
env_bins.c:         (my_strcmp(m->word_tab[1], my_str_tab(m->env->var)[0]) != 0))
env_bins.c:    m->env = m->env->next;
env_bins.c:  if (m->env == NULL)
env_bins.c:      m->env = tmp;
env_bins.c:  else if (my_strcmp(m->word_tab[1], my_str_tab(m->env->var)[0]) == 0)
env_bins.c:    remove_node(&m->env, &tmp);
env_bins.c:  m->env = tmp;
env.c:  m->env = NULL;
env.c:      if (my_put_in_list_end(&m->env, env[i], &m->env) == 1)
exec.c:  if ((my_strcmp(m->word_tab[0], g_bin[i].str)) == 0)
exec.c:  else if (path != NULL && (save = find_function(path, m->word_tab[0])))
exec.c:      m->word_tab[0] = save;
exec.c:      check = execute_fork(m->word_tab, m->env, m);
exec.c:  m->word_tab = my_str_tab(ret);
exec.c:  path = find_var(m->env, "PATH");
exec.c:         && (my_strcmp(m->word_tab[0], g_bin[i].str) != 0))
exec.c:  free_tab(m->word_tab);
fork_manage.c:  tab = malloc(sizeof(char *) * (chain_count(m->env) + 1));
main.c:  m->ret = 0;
pipe.c:      return (m->ret = WTERMSIG(status) + 128);
pipe.c:    return (m->ret = WEXITSTATUS(status));
shell.c:  m->tree = NULL;
shell.c:      if (make_tree(&m->tree, ret) == 1)
shell.c:      show_tree(m->tree, 0);
shell.c:      check = launch_tree(m->tree, m);
shell.c:      free_tree(m->tree);
shell.c:        return (m->ret);
shell.c:      m->ret = check;
shell.c:      m->ret = 1;
status.c:      return (m->ret = WTERMSIG(status) + 128);
status.c:    return (m->ret = WEXITSTATUS(status));
